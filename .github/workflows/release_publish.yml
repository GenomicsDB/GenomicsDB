name: Publish release jar

on:
  workflow_call:
    inputs:
      release_artifact:
        required: true
        type: string
    secrets:
      MAVEN_GPG_PASSPHRASE:
        required: true
      MAVEN_GPG_PRIVATE_KEY:
        required: true
      OSSRH_USERNAME:
        required: true
      OSSRH_PASSWORD:
        required: true

jobs:
  publish-jar:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set version number
        run: echo VERSION_NUMBER=${GITHUB_REF_NAME:1} >> $GITHUB_ENV

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Download release artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ inputs.release_artifact }}

      - name: Deploy Maven Central
        shell: bash
        run: |
          sudo apt install -y xmlstarlet
          if [[ ${VERSION_NUMBER} = *SNAPSHOT ]]; then
            URL=`xmlstarlet sel -t -m "//_:project" -v _:distributionManagement/_:snapshotRepository/_:url genomicsdb-${VERSION_NUMBER}.pom`
            REPO_ID=`xmlstarlet sel -t -m "//_:project" -v _:distributionManagement/_:snapshotRepository/_:id genomicsdb-${VERSION_NUMBER}.pom`
          else
            URL=`xmlstarlet sel -t -m "//_:project" -v _:distributionManagement/_:repository/_:url genomicsdb-${VERSION_NUMBER}.pom`
            REPO_ID=`xmlstarlet sel -t -m "//_:project" -v _:distributionManagement/_:repository/_:id genomicsdb-${VERSION_NUMBER}.pom`
          fi

          echo "Deploying jars..."

          # main jar
          mvn gpg:sign-and-deploy-file -Durl=$URL -Dfile=genomicsdb-${VERSION_NUMBER}.jar \
            -DgroupId=org.genomicsdb -DartifactId=genomicsdb -Dversion=${VERSION_NUMBER} \
            -Dpackaging=jar -DpomFile=genomicsdb-${VERSION_NUMBER}.pom -DrepositoryId=$REPO_ID \
            -Djavadoc=genomicsdb-${VERSION_NUMBER}-javadoc.jar \
            -Dsources=genomicsdb-${VERSION_NUMBER}-sources.jar \
            -Dfiles=genomicsdb-${VERSION_NUMBER}-allinone-spark.jar -Dtypes=jar -Dclassifiers=allinone

          # spark jar
          mvn gpg:sign-and-deploy-file -Durl=$URL -Dfile=genomicsdb-spark-${VERSION_NUMBER}.jar \
            -DgroupId=org.genomicsdb -DartifactId=genomicsdb-spark -Dversion=${VERSION_NUMBER} \
            -Dpackaging=jar -DpomFile=genomicsdb-${VERSION_NUMBER}.pom -DrepositoryId=$REPO_ID \
            -Djavadoc=genomicsdb-${VERSION_NUMBER}-javadoc.jar \
            -Dsources=genomicsdb-${VERSION_NUMBER}-sources.jar

          echo "Deploying jars DONE"

          # publish
          if [[ ${VERSION_NUMBER} != *SNAPSHOT ]]; then
              echo "Gather Sonatype staging repository ID..."
              stagingRepoId=$(mvn nexus-staging:rc-list -DnexusUrl=https://oss.sonatype.org/ -DserverId=ossrh -f genomicsdb-${VERSION_NUMBER}.pom| awk '/orggenomicsdb/ {print $2}')
              echo "Staging Repository ID: $stagingRepoId"
              echo "Releasing staged repository..."
              mvn nexus-staging:rc-close -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$stagingRepoId -f genomicsdb-${VERSION_NUMBER}.pom
              mvn nexus-staging:rc-release -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$stagingRepoId -f genomicsdb-${VERSION_NUMBER}.pom
              echo "Releasing staged repository DONE"
          fi
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
