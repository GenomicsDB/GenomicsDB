sudo: required
dist: trusty

language: python
python: "3.4"

env:
    global:
        - CACHE_DIR=$TRAVIS_BUILD_DIR/cached
        - LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/dependencies/libcsv/.libs
        - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        - GENOMICSDB_BUILD_DIR=$TRAVIS_BUILD_DIR/build
        - GENOMICSDB_INSTALL_DIR=$GENOMICSDB_BUILD_DIR/install
        - PATH=$GENOMICSDB_INSTALL_DIR/bin:$TRAVIS_BUILD_DIR/bin:$PATH
        - GENOMICSDB_RELEASE_VERSION=x.y.z-travis-test
        - secure: ns0xWDbnmDb71J0/edoJ4jN/xtPg4yxnbexe/AcTwHUOkLehEuGHY7tlZa8cTlBsV19+CFXpYXn4LezS/7989gPfI5Kl0lLg1T8I4V+t2iJTAXurjew0i1AVjQBKfVWtYhGJQOws8DMUDunTxEJMahZzdNK1McLxvongJ7mD1rLabSlLE81lSnsVwvms/4Cp6c2hxec8mNsxxV9CUDzrsX63te/srvPuG+FMD1E32PYuTJJpNH3O7/nvbuW5bOvdwT5Yq/dHGF96U+YZpvqH1PqqtXUuZRJltFUaTsdEclv9Q1DpSpikEmPL+iOJRgS1W0i+mZ2wShFYmSZIv/fwlVoE4bNnLd/dJOTsS6hSpVpEPJnK/YizPNxoB21LAZACdg6rSBnPClfMnYdkNilL9h1s/u4P6RTHUztc8Ty6z1qpi78pOjS3t26o36m87MtXnkkTp06Q0O5kDSM35xsTdBevGeT3lWfYSxRpM/ypqb6xTnii8ZQ+Ohe+m7AVFhE5nFh2JUxQRCcl0xjZQyy2nbLPmDfvnAM+yIvGBZPPiCVJgWy5Vs3Jm1TC5Ju63Rz+RzJfAIiy6DhnUDK74ip5NMP1PXey8ySKnOfcPcxCdJVqqtEARvt+zIhrbGZCkjDUR1L2OOBheZ6RKY/rsuAsVOBo9s+ELBz0Y4hWXDhmn5c=

matrix:
    include:
      - name: "Basic build Linux"
        os: linux
        env: INSTALL_TYPE=basic
        services: postgres
        cache:
          directories: $HOME/.m2 $CACHE_DIR

      - name: "Basic build OSX - 1"
        os: osx
        osx_image: xcode9.3
        language: generic
        env: TOXENV=py34 INSTALL_TYPE=basic OSX_PHASE=1 PROTOBUF_VERSION=3.0.0-beta-1 PROTOBUF_HOME=$TRAVIS_BUILD_DIR/dependencies/protobuf
        cache:
          directories: $HOME/.m2 $HOME/Library/Caches/Homebrew $CACHE_DIR

      - name: "Basic build OSX - 2"
        os: osx
        osx_image: xcode9.3
        language: generic
        env: TOXENV=py34 INSTALL_TYPE=basic OSX_PHASE=2 PROTOBUF_VERSION=3.0.0-beta-1 PROTOBUF_HOME=$TRAVIS_BUILD_DIR/dependencies/protobuf
        cache:
          directories: $HOME/.m2 $HOME/Library/Caches/Homebrew $CACHE_DIR

      - name: "Spark/HDFS Linux"
        os: linux
        env: INSTALL_TYPE=hdfs
        services: postgres
        cache:
          directories: $HOME/.m2 $CACHE_DIR

#
# commenting out for now because these seem flaky
#      - name: "Spark/GCS Linux"
#        os: linux
#        env: INSTALL_TYPE=gcs

# before_cache:
#    - if [[ $TRAVIS_OS_NAME == osx ]]; then brew cleanup; fi

before_install:
#    - if [[ $TRAVIS_OS_NAME == osx ]]; then brew update; fi
    - if [[ $TRAVIS_OS_NAME == osx ]]; then brew list python &>/dev/null || brew install python; fi
    - if [[ $TRAVIS_OS_NAME == osx ]]; then brew list python3 &>/dev/null || brew install python3; fi
    - if [[ $INSTALL_TYPE == gcs ]]; then
        pushd $TRAVIS_BUILD_DIR/.travis/resources/gcs;
        openssl aes-256-cbc -K $encrypted_7798cc2401f2_key -iv $encrypted_7798cc2401f2_iv -in GCS.json.enc -out ~/GCS.json -d;
        popd;
      fi

install:
    - if [[ -d $CACHE_DIR ]]; then
        mkdir -p $CACHE_DIR;
      fi
    # Install dependencies
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        pip install -r tests/requirements.txt;
      elif [[ $TRAVIS_OS_NAME == osx ]]; then
        pip install --user -r tests/requirements.txt;
      fi
    - sudo pip2 install jsondiff
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        sudo apt-get -y install lcov mpich zlib1g-dev libssl-dev rsync cmake uuid-dev libcurl4-openssl-dev;
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y;
        sudo add-apt-repository -y ppa:openjdk-r/ppa;
        sudo apt-get update -q;
        sudo apt-get install gcc-4.9 -y;
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60;
        sudo apt-get install g++-4.9 -y;
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 60;
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-4.9 60;
        sudo apt-get install libdbi-dev libdbd-pgsql -y;
        sudo apt-get -y install openjdk-8-jdk icedtea-plugin;
        sudo apt-get -y install zip unzip;
        wget -nv https://github.com/GenomicsDB/GenomicsDB/releases/download/v1.0.0/protobuf-3.0.2-trusty.tar.gz -O protobuf-3.0.2-trusty.tar.gz;
        tar xzf protobuf-3.0.2-trusty.tar.gz && sudo rsync -a protobuf-3.0.2-trusty/ /usr/;
        cd $TRAVIS_BUILD_DIR;
        cd dependencies && git clone https://github.com/rgamble/libcsv && cd libcsv && ./configure && make;
        jdk_switcher use openjdk8;
      elif [[ $TRAVIS_OS_NAME == osx ]]; then
        HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov mpich ossp-uuid libcsv;
        source $TRAVIS_BUILD_DIR/.travis/scripts/install_osx_dependencies.sh;
        JAVA_HOME=$(/usr/libexec/java_home);
        which cmake && cmake --version;
      fi
    - echo $JAVA_HOME
    - export PATH=$JAVA_HOME/bin:$PATH
    - which javac && javac -version
    - which java && java -version
    - if [[ ! -f $CACHE_DIR/bcftools-1.10.2.tar.bz2 ]]; then
        wget -nv https://github.com/samtools/bcftools/releases/download/1.10.2/bcftools-1.10.2.tar.bz2 -O $CACHE_DIR/bcftools-1.10.2.tar.bz2;
      fi
    - cd $TRAVIS_BUILD_DIR
    - tar -xjf $CACHE_DIR/bcftools-1.10.2.tar.bz2 && cd bcftools-1.10.2 && make -j4 && cd .. && export PATH=$PATH:$TRAVIS_BUILD_DIR/bcftools-1.10.2
    - which bcftools
    # install spark/hdfs/scala
    - if [[ $INSTALL_TYPE != basic ]]; then
        wget -nv https://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.deb;
        sudo dpkg -i scala-2.11.8.deb;
        source $TRAVIS_BUILD_DIR/.travis/scripts/install_hadoop.sh;
        source $TRAVIS_BUILD_DIR/.travis/scripts/install_spark.sh;
      fi

    - cd $TRAVIS_BUILD_DIR
    - mkdir -p $GENOMICSDB_BUILD_DIR

before_script:
    - cd $GENOMICSDB_BUILD_DIR
    # Reset line coverage
    - lcov --directory . --zerocounters
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        psql -U postgres -c 'create database gendb';
        psql -U postgres gendb < $TRAVIS_BUILD_DIR/src/resources/gendb_state_for_tests.txt;
        psql gendb -U postgres -c 'select count(*) from reference';
      fi

script:
    - cd $GENOMICSDB_BUILD_DIR
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        cmake $TRAVIS_BUILD_DIR -DBUILD_JAVA=1 -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_INSTALL_PREFIX=$GENOMICSDB_INSTALL_DIR -DLIBCSV_DIR=$TRAVIS_BUILD_DIR/dependencies/libcsv -DGENOMICSDB_RELEASE_VERSION=$GENOMICSDB_RELEASE_VERSION -DMAVEN_QUIET=True -DENABLE_LIBCURL=True;
      elif [[ $TRAVIS_OS_NAME == osx ]]; then
        cmake $TRAVIS_BUILD_DIR -DBUILD_JAVA=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$GENOMICSDB_INSTALL_DIR -DLIBCSV_DIR=$TRAVIS_BUILD_DIR/dependencies/libcsv -DGENOMICSDB_RELEASE_VERSION=$GENOMICSDB_RELEASE_VERSION -DMAVEN_QUIET=True -DENABLE_LIBCURL=False -DCMAKE_PREFIX_PATH=$PROTOBUF_HOME -DOPENSSL_PREFIX_DIR=/usr/local/opt/openssl -DCMAKE_C_COMPILER=/usr/local/opt/mpich/bin/mpicc -DCMAKE_CXX_COMPILER=/usr/local/opt/mpich/bin/mpicxx;
      fi
    - make -j4 && make install
    - if [[ $INSTALL_TYPE == hdfs ]]; then
        echo "Run spark/hdfs tests";
        /usr/local/spark/sbin/start-master.sh;
        travis_wait 40 python2 $TRAVIS_BUILD_DIR/tests/run_spark_hdfs.py $GENOMICSDB_BUILD_DIR $GENOMICSDB_INSTALL_DIR local hdfs://localhost:9000/ client $GENOMICSDB_RELEASE_VERSION $TRAVIS_BUILD_DIR/tests Coverage;
      elif [[ $INSTALL_TYPE == gcs ]]; then
        echo "Run spark/gcs tests";
        /usr/local/spark/sbin/start-master.sh;
        export GOOGLE_APPLICATION_CREDENTIALS=~/GCS.json;
        travis_wait 40 python2 $TRAVIS_BUILD_DIR/tests/run_spark_hdfs.py $GENOMICSDB_BUILD_DIR $GENOMICSDB_INSTALL_DIR local gs://$GS_BUCKET client $GENOMICSDB_RELEASE_VERSION $TRAVIS_BUILD_DIR/tests Coverage;
      elif [[ $TRAVIS_OS_NAME == osx && ! -f $CACHE_DIR/initialized ]]; then
        touch $CACHE_DIR/initialized;
      elif [[ $TRAVIS_OS_NAME == osx && -f $CACHE_DIR/initialized ]]; then
        travis_wait 50 python2 $TRAVIS_BUILD_DIR/tests/run.py $GENOMICSDB_BUILD_DIR $GENOMICSDB_INSTALL_DIR Coverage $OSX_PHASE;
      else
        make test ARGS=-V;
      fi

after_success:
    - cd $GENOMICSDB_BUILD_DIR
    - lcov --directory . --capture --output-file coverage.info
    # Remove protocol buffer generated files from the coverage information
    - lcov --remove coverage.info '/opt*' '/usr*' '*/dependencies/*' '*/src/test*' '*.pb.h' '*.pb.cc' -o coverage.info
    - lcov --list coverage.info
    # Uploading report to CodeCov
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
