/**
 * The MIT License (MIT)
 * Copyright (c) 2016-2017 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of 
 * this software and associated documentation files (the "Software"), to deal in 
 * the Software without restriction, including without limitation the rights to 
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of 
 * the Software, and to permit persons to whom the Software is furnished to do so, 
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all 
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**
 * To build, use protocol buffer version >3.2.0 and the following command from base directory:
 * $ protoc -Isrc/resources/ --java_out=src/main/java/ src/resources/genomicsdb_export_config.proto
 */

syntax = "proto2";

import "genomicsdb_coordinates.proto";
import "genomicsdb_vid_mapping.proto";
import "genomicsdb_callsets_mapping.proto";

option java_package = "org.genomicsdb.model";
option java_outer_classname = "GenomicsDBExportConfiguration";

package genomicsdb_pb;

message GenomicsDBColumnOrIntervalList {
  repeated GenomicsDBColumnOrInterval column_or_interval_list = 1;
}

message RowRange {
  required int64 low = 1;
  required int64 high = 2;
}

message RowRangeList {
  repeated RowRange range_list = 1;
}

message SparkConfig {
  optional int64 query_block_size = 1;
  optional int64 query_block_size_margin = 2;
}

message ExportConfiguration {
  required string workspace = 1;
  oneof array {
    string array_name = 2;
    bool generate_array_name_from_partition_bounds = 3;
  }
  optional string reference_genome = 4;
  //Only one of the following two fields must be defined - the seconds one is  a simpler
  //version that I would recommend using
  //Ideally, query_column_ranges should be deprecated
  repeated GenomicsDBColumnOrIntervalList query_column_ranges = 5;
  repeated ContigInterval query_contig_intervals = 6;
  //Similar to above - query_row_ranges should be deprecated
  repeated RowRangeList query_row_ranges = 7;
  repeated string query_sample_names = 8;
  repeated string attributes = 9;
  optional string query_filter = 10;
  optional string vcf_header_filename = 11;
  optional string vcf_output_filename = 12;
  optional string vcf_output_format = 13;
  oneof vid_mapping_info {
    string vid_mapping_file = 14;
    VidMappingPB vid_mapping = 15; 
  }
  oneof callset_mapping_info {
    string callset_mapping_file = 16;
    CallsetMappingPB callset_mapping = 17;
  }
    
  optional uint32 max_diploid_alt_alleles_that_can_be_genotyped = 18;
  optional uint32 max_genotype_count = 19;
  optional bool index_output_VCF = 20; 
  optional bool produce_GT_field = 21;
  optional bool produce_FILTER_field = 22;
  optional bool sites_only_query = 23;
  optional bool produce_GT_with_min_PL_value_for_spanning_deletions = 24;
  optional bool scan_full = 25;
  optional uint32 segment_size = 26;
  optional uint32 combined_vcf_records_buffer_size_limit = 27;
  optional bool enable_shared_posixfs_optimizations = 28;
  optional SparkConfig spark_config = 29;
}
